using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using Newtonsoft.Json.Linq;
using SleekFlow.Web.WebAPI.DTOs.Login;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace SleekFlow.Web.WebAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class WebAuthController : ControllerBase
    {
        private readonly IConfiguration configuration;

        public WebAuthController(IConfiguration configuration)
        {
            this.configuration = configuration;
        }

        /// <summary>
        /// login and get jwt token
        /// </summary>
        /// <param name="login"></param>
        /// <returns></returns>
        [HttpPost]
        [Route("Login")]
        [AllowAnonymous]
        public async Task<string> Login([FromBody] LoginDto login)
        {
            var users = configuration.GetSection("DummyUsers").GetChildren();

            if (users.Select(x => x.GetValue<string>("Username")).Contains(login.Username))
            {
                var user = users.First(y => y.GetValue<string>("Username") == login.Username);

                if (user.GetValue<string>("Password") == login.Password)
                {
                    var issuer = configuration["Jwt:Issuer"];
                    var audience = configuration["Jwt:Audience"];
                    var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(configuration["Jwt:Key"]));
                    var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);

                    // Now its ime to define the jwt token which will be responsible of creating our tokens
                    var jwtTokenHandler = new JwtSecurityTokenHandler();

                    // We get our secret from the appsettings
                    var key = Encoding.ASCII.GetBytes(configuration["Jwt:Key"]);

                    // we define our token descriptor
                    // We need to utilise claims which are properties in our token which gives information about the token
                    // which belong to the specific user who it belongs to
                    // so it could contain their id, name, email the good part is that these information
                    // are generated by our server and identity framework which is valid and trusted
                    var tokenDescriptor = new SecurityTokenDescriptor
                    {
                        Subject = new ClaimsIdentity(new[]
                        {
                        new Claim("Id", Guid.NewGuid().ToString()),
                        new Claim(JwtRegisteredClaimNames.Sub, login.Username),
                        new Claim(JwtRegisteredClaimNames.Email, login.Username),
                        // the JTI is used for our refresh token which we will be convering in the next video
                        new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),
                    }.Concat(user.GetSection("Roles").GetChildren().Select(x => new Claim(ClaimTypes.Role, x.Value)).ToArray())),
                        // the life span of the token needs to be shorter and utilise refresh token to keep the user signedin
                        // but since this is a demo app we can extend it to fit our current need
                        Expires = DateTime.UtcNow.AddHours(6),
                        Audience = audience,
                        Issuer = issuer,
                        // here we are adding the encryption alogorithim information which will be used to decrypt our token
                        SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha512Signature)
                    };

                    var token = jwtTokenHandler.CreateToken(tokenDescriptor);

                    var jwtToken = jwtTokenHandler.WriteToken(token);

                    return await Task.FromResult(jwtToken);
                }
            }

            HttpContext.Response.StatusCode = 401;
            return null!;
        }
    }
}
